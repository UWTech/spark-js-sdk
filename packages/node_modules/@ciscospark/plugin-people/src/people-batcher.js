/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import {Batcher} from '@ciscospark/spark-core';

/**
 * @class
 */
const PersonUUIDRequestBatcher = Batcher.extend({
  namespace: `People`,
  // optional flag that requires Hydra to send every type field,
  // even if the type is not "person" (e.g.: SX10, webhook_intergation, etc.)
  showAllTypes: false,

  /**
   * @param {HttpResponseObject} res
   * @returns {Promise}
   */
  handleHttpSuccess(res) {
    return Promise.all(res.body.items.map((personResponse) =>
      this.handleItemSuccess(personResponse.id, personResponse)
    ));
  },

  handleItemFailure(email, response) {
    return this.getDeferredForResponse(email)
      .then((defer) => {
        defer.reject(response);
      });
  },

  /**
   * @param {string} email
   * @param {Object} response
   * @returns {Promise}
   */
  handleItemSuccess(email, response) {
    return this.getDeferredForResponse(email)
      .then((defer) => {
        defer.resolve(response);
      });
  },

  /**
   * @param {string} uuid
   * @returns {Promise<string>}
   */
  fingerprintRequest(uuid) {
    return Promise.resolve(this.spark.people.inferPersonIdFromUuid(uuid));
  },

  /**
   * @param {string} uuid
   * @returns {Promise<string>}
   */
  fingerprintResponse(uuid) {
    return Promise.resolve(uuid);
  },

  prepareRequest(ids) {
    return Promise.resolve(ids.join());
  },

  /**
   * @param {Object} ids
   * @returns {Promise<HttpResponseObject>}
   */
  submitHttpRequest(ids) {
    return this.spark.request({
      service: `hydra`,
      resource: `people/?id=${ids}&showAllTypes=${this.showAllTypes}`
    });
  }
});

export default PersonUUIDRequestBatcher;
